---------Assignment on MYSQL----------- 

//1.Write an SQL query to fetch “FIRST_NAME” from Worker table using the alias name as <WORKER_NAME>.
SELECT FIRST_NAME AS WORKER_NAME FROM WORKER;

//2.Write an SQL query to fetch “FIRST_NAME” from Worker table in upper case.
SELECT UPPER(FIRST_NAME) FROM WORKER;

//3.Write an SQL query to fetch unique values of DEPARTMENT from Worker table.
SELECT DISTINCT DEPARTMENT FROM WORKER;

//4.Write an SQL query to print the first three characters of  FIRST_NAME from Worker table.
SELECT SUBSTRING(FIRST_NAME,1,3) FROM WORKER;

//5.Write an SQL query to find the position of the alphabet (‘a’) in the first name column ‘Amitabh’ from Worker table.
SELECT INSTR(FIRST_NAME,BINARY 'A')FROM WORKER WHERE FIRST_NAME='AMITABH';

//6.Write an SQL query to print the FIRST_NAME from Worker table after removing white spaces from the right side.
SELECT RTRIM(FIRST_NAME) FROM WORKER;

//7.Write an SQL query to print the DEPARTMENT from Worker table after removing white spaces from the left side.
SELECT LTRIM(DEPARTMENT) FROM WORKER;

//8.Write an SQL query that fetches the unique values of DEPARTMENT from Worker table and prints its length.
SELECT DISTINCT LENGTH(DEPARTMENT) FROM WORKER;

//9.Write an SQL query to print the FIRST_NAME from Worker table after replacing ‘a’ with ‘A'.
SELECT REPLACE(FIRST_NAME,'a','A')FROM WORKER;

//10.. Write an SQL query to print the FIRST_NAME and LAST_NAME from Worker table into a single column COMPLETE_NAME. 
A space char should separate them.
SELECT CONCAT(FIRST_NAME,'',LAST_NAME) AS 'COMPLETE_NAME' FROM WORKER;

//11.Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending.
SELECT * FROM WORKER ORDER BY FIRST_NAME ASC;

//12.Write an SQL query to print all Worker details from the Worker table order by FIRST_NAME Ascending and DEPARTMENT Descending.
SELECT * FROM WORKER ORDER BY FIRST_NAME ASC,DEPARTMENT DESC;

//13.Write an SQL query to print details for Workers with the first name as “Vipul” and “Satish” from Worker table.
SELECT * FROM WORKER WHERE FIRST_NAME IN ('VIPUL','SATISH');

//14.Write an SQL query to print details of workers excluding first names, “Vipul” and “Satish” from Worker table.
SELECT * FROM WORKER WHERE FIRST_NAME NOT IN ('VIPUL','SATISH');

//15.Write an SQL query to print details of Workers with DEPARTMENT name as “Admin”.
SELECT * FROM WORKER WHERE DEPARTMENT LIKE 'ADMIN%';

//16.Write an SQL query to print details of the Workers whose FIRST_NAME contains ‘a’.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%A%';

//17.Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘a’.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '%A';

//18.Write an SQL query to print details of the Workers whose FIRST_NAME ends with ‘h’ and contains six alphabets.
SELECT * FROM WORKER WHERE FIRST_NAME LIKE '______H';

//19.Write an SQL query to print details of the Workers whose SALARY lies between 100000 and 500000.
SELECT * FROM WORKER WHERE SALARY BETWEEN 100000 AND 500000;

//20.Write an SQL query to print details of the Workers who have joined in Feb’2014.
SELECT * FROM WORKER WHERE YEAR(JOINING_DATE)=2014 AND MONTH(JOINING_DATE)=2;

//21.Write an SQL query to fetch the count of employees working in the department ‘Admin’.
SELECT COUNT(*) FROM WORKER WHERE DEPARTMENT='ADMIN'; 

//22.Write an SQL query to fetch worker names with salaries >= 50000 and <= 100000.
SELECT CONCAT(FIRST_NAME,'',LAST_NAME) AS WORKER_NAME,SALARY FROM WORKER 
WHERE WORKER_ID IN (SELECT WORKER_ID FROM WORKER WHERE SALARY BETWEEN 50000 AND 100000);

//23.Write an SQL query to fetch the no. of workers for each department in the descending order.
SELECT DEPARTMENT,COUNT(WORKER_ID) NO_OF_WORKERS FROM WORKER GROUP BY DEPARTMENT 
ORDER BY NO_OF_WORKERS DESC;

//24.Write an SQL query to print details of the Workers who are also Managers.
SELECT DISTINCT W.FIRST_NAME,T.WORKER_TITLE FROM WORKER W INNER JOIN TITLE T
ON W.WORKER_ID=T.WORKER_REF_ID AND T.WORKER_TITLE IN('MANAGER');

//25.Write an SQL query to fetch duplicate records having matching data in some fields of a table.
SELECT WORKER_TITLE,AFFECTED_FROM,COUNT(*) FROM TITLE 
GROUP BY WORKER_TITLE,AFFECTED_FROM HAVING COUNT(*)>1;

//26.Write an SQL query to show only odd rows from a table.
SELECT * FROM WORKER WHERE MOD(WORKER_ID,2)<>0;

//27.Write an SQL query to show only even rows from a table.
SELECT * FROM WORKER WHERE MOD(WORKER_ID,2)=0;

//28.Write an SQL query to clone a new table from another table.
The general query to clone a table with data is:
SELECT * INTO WORKERCLONE FROM WORKER;

The general way to clone a table without information is:
SELECT * INTO WORKERCLONE FROM WORKER WHERE 1=0;

An alternate way to clone a table (for MySQL) without is:
CREATE TABLE WorkerClone LIKE Worker;

//29.Write an SQL query to fetch intersecting records of two tables.

(SELECT * FROM WORKER)
INTERSECT
(SELECT * FROM WorkerClone);

//30.Write an SQL query to show records from one table that another table does not have.
SELECT * FROM WORKER
MINUS
SELECT * FROM TITLE;

//31.Write an SQL query to show the current date and time.
Following MySQL query returns the current date:
SELECT CURDATE();

Following MySQL query returns the current date and time:
SELECT NOW();

Following SQL Server query returns the current date and time:
SELECT GETDATE();

Following Oracle query returns the current date and time:
SELECT SYSDATE FROM DUAL;

//32.Write an SQL query to show the top n (say 10) records of a table.
Following MySQL query will return the top n records using the LIMIT method:
SELECT * FROM WORKER ORDER BY SALARY DESC LIMIT 10;

Following SQL Server query will return the top n records using the TOP command:
SELECT TOP 10 * FROM Worker ORDER BY Salary DESC;

Following Oracle query will return the top n records with the help of ROWNUM:
SELECT * FROM (SELECT * FROM Worker ORDER BY Salary DESC)
WHERE ROWNUM <= 10;

//33.Write an SQL query to determine the nth (say n=5) highest salary from a table.
The following MySQL query returns the nth highest salary:
SELECT SALARY FROM WORKER ORDER BY SALARY DESC LIMIT n-1,1;

The following SQL Server query returns the nth highest salary:
SELECT TOP 1 Salary
FROM (
 SELECT DISTINCT TOP n Salary
 FROM Worker 
 ORDER BY Salary DESC
 )
ORDER BY Salary ASC;

//34.Write an SQL query to determine the 5th highest salary without using TOP or limit method.
The following query is using the correlated subquery to return the 5th highest salary:
SELECT SALARY FROM WORKER W1
WHERE 4=(
    SELECT COUNT(DISTINCT (W2.SALARY))
    FROM WORKER W2
    WHERE W2.SALARY>=W1.SALARY
    );
 
Use the following generic method to find nth highest salary without using TOP or limit.
SELECT SALARY FROM WORKER W1
WHERE n-1=(
    SELECT COUNT(DISTINCT(W2.SALARY))
    FROM WORKER W2
    WHERE W2.SALARY>=W1.SALARY
    );

//35.Write an SQL query to fetch the list of employees with the same salary.
SELECT DISTINCT W.WORKER_ID,W.FIRST_NAME,W.SALARY
FROM WORKER W,WORKER W1
WHERE W.SALARY=W1.SALARY
AND W.WORKER_ID !=W1.WORKER_ID;

//36.Write an SQL query to show the second highest salary from a table.
SELECT MAX(SALARY) FROM WORKER WHERE SALARY NOT IN (SELECT MAX(SALARY) FROM WORKER);

//37.Write an SQL query to show one row twice in results from a table.
SELECT FIRST_NAME,DEPARTMENT FROM WORKER W WHERE W.DEPARTMENT='HR'
UNION ALL
SELECT FIRST_NAME,DEPARTMENT FROM WORKER WHERE W1.DEPARTMENT='HR';

//38.Write an SQL query to fetch intersecting records of two tables.
(SELECT * FROM WORKER)
INTERSECT
(SELECT * FROM WORKERCLONE);

//39.Write an SQL query to fetch the first 50% records from a table.
SELECT * FROM WORKER WHERE WORKER_ID<=(SELECT COUNT(WORKER_ID)/2 FROM WORKER);

//40.Write an SQL query to fetch the departments that have less than five people in it.
SELECT DEPARTMENT,COUNT(WORKER_ID) AS 'NUMBER OF WORKERS' FROM WORKER 
GROUP BY DEPARTMENT HAVING COUNT(WORKER_ID)<5;

//41.Write an SQL query to show all departments along with the number of people in there.
SELECT DEPARTMENT,COUNT(DEPARTMENT)AS 'NUMBER OF WORKERS' FROM WORKER
GROUP BY DEPARTMENT;

//42.Write an SQL query to show the last record from a table.
SELECT * FROM WORKER WHERE WORKER_ID=(SELECT MAX(WORKER_ID) FROM WORKER);

//43.Write an SQL query to fetch the first row of a table.
SELECT * FROM WORKER WHERE WORKER_ID=(SELECT MIN(WORKER_ID) FROM WORKER);

//44.Write an SQL query to fetch the last five records from a table.
SELECT * FROM WORKER WHERE WORKER_ID<=5
UNION
SELECT * FROM (SELECT * FROM  WORKER W ORDER BY W.WORKER_ID DESC) AS W1 WHERE W1.WORKER_ID<=5;

//45.Write an SQL query to print the name of employees having the highest salary in each department.
SELECT T.DEPARTMENT,T.FIRST_NAME,T.SALARY FROM (SELECT MAX(SALARY) AS TOTALSALARY,DEPARTMENT FROM WORKER GROUP BY DEPARTMENT)
AS TEMPNEW
INNER JOIN WORKER ON TEMPNEW.DEPARTMENT=T.DEPARTMENT AND TEMPNEW.TOTALSALARY=T.SALARY;

//46.Write an SQL query to fetch three max salaries from a table.
SELECT DISTINCT SALARY FROM WORKER A WHERE 3>=(SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY<=B.SALARY)
ORDER BY A.SALARY DESC;

//47.Write an SQL query to fetch three min salaries from a table.
SELECT DISTINCT SALARY FROM WORKER A WHERE 3>=(SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY>=B.SALARY)
ORDER BY A.SALARY DESC;

//48.Write an SQL query to fetch nth max salaries from a table.
SELECT DISTINCT SALARY FROM WORKER A WHERE n>=(SELECT COUNT(DISTINCT SALARY) FROM WORKER B WHERE A.SALARY<=B.SALARY)
ORDER BY A.SALARY DESC;

//49.. Write an SQL query to fetch departments along with the total salaries paid for each of them.
SELECT DEPARTMENT,SUM(SALARY) FROM WORKER GROUP BY DEPARTMENT;

//50.Write an SQL query to fetch the names of workers who earn the highest salary.
SELECT FIRST_NAME,SALARY FROM WORKER WHERE SALARY=(SELECT MAX(SALARY) FROM WORKER);


        











